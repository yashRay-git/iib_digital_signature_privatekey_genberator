
BROKER SCHEMA Fidelity_Bank_GhIPSS_Common
PATH com.fidilitybank.co.zw.common.esql;

DECLARE LOG_CONFIG_PATH,DBDSN EXTERNAL CHARACTER'';
CREATE COMPUTE MODULE SF_Fidelity_Bank_GhIPSS_ExceptionHandler
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		CALL CopyEntireMessage();
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		DECLARE rc BOOLEAN FALSE;
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		DECLARE loggingData CHARACTER;
		DECLARE payload CHARACTER;
		DECLARE statusCode INTEGER;
		DECLARE RequestId INTEGER;
		IF EXISTS(InputExceptionList.*[]) THEN
			DECLARE excp REFERENCE TO InputExceptionList.*[1];
			DECLARE excpType CHARACTER FIELDNAME(InputExceptionList.*);
			DECLARE text,actualExcp,number,actualExcpText,messageText CHARACTER;
			DECLARE excptext REFERENCE TO excp.Text;
			DECLARE insertRef REFERENCE TO InputExceptionList.*[1];

			WHILE LASTMOVE(excp) DO
				MOVE excp LASTCHILD;
				IF excp.Number is not null THEN
					SET text=excp.Text;
					DECLARE inserts REFERENCE TO excp.Insert;
					DECLARE texts REFERENCE TO excp.Insert.texts;
					MOVE insertRef TO excp.Insert[>];
					WHILE LASTMOVE(insertRef) AND FIELDNAME(insertRef) = 'Insert' DO
						SET actualExcpText = insertRef.Text;
						IF Environment.dataa is NULL THEN
							SET Environment.dataa = actualExcpText;
						END IF;
						MOVE insertRef NEXTSIBLING;
						IF insertRef.Text <> '' THEN
							SET actualExcp = actualExcpText || insertRef.Text;
							SET excpType = text;
						END IF;
					END WHILE;
					SET number = excp.Number;
				END IF;
			END WHILE;
			SET messageText = text ||', ' ||Environment.dataa ||', '||actualExcp;
			
		ELSE
			CREATE LASTCHILD OF Environment.payload DOMAIN('JSON') PARSE(InputRoot.BLOB.BLOB);
			SET messageText = CAST(ASBITSTREAM(Environment.payload) AS CHARACTER CCSID InputRoot.Properties.CodedCharSetId ENCODING InputRoot.Properties.Encoding);
			SET statusCode = InputRoot.HTTPResponseHeader."X-Original-HTTP-Status-Code";
			SET RequestId = '';

			CREATE LASTCHILD OF Environment DOMAIN 'JSON';
			CREATE LASTCHILD OF Environment.JSON NAME 'Data';
			DECLARE errOutRef REFERENCE TO Environment.JSON.Data;

			IF statusCode = 500 THEN
				SET errOutRef.requestId = RequestId;
				SET errOutRef.timestamp = CURRENT_TIMESTAMP;
				SET errOutRef.msgData = payload;
				SET errOutRef.statusCode = statusCode;
				SET errOutRef.ErrorDescription = 'Internal Server Error';
				SET OutputRoot.JSON.Data = errOutRef;

			ELSEIF statusCode = 404 THEN
				SET errOutRef.requestId = RequestId;
				SET errOutRef.timestamp = CURRENT_TIMESTAMP;
				SET errOutRef.msgData = payload;
				SET errOutRef.statusCode = statusCode;
				SET errOutRef.ErrorDescription = 'Resource Not Found';
				SET OutputRoot.JSON.Data = errOutRef;

			ELSEIF statusCode = 400 THEN
				SET errOutRef.requestId = RequestId;
				SET errOutRef.timestamp = CURRENT_TIMESTAMP;
				SET errOutRef.msgData = payload;
				SET errOutRef.statusCode = statusCode;
				SET errOutRef.ErrorDescription = 'Bad Request';
				SET OutputRoot.JSON.Data = errOutRef;

			ELSE
				SET errOutRef.requestId = RequestId;
				SET errOutRef.timestamp = CURRENT_TIMESTAMP;
				SET errOutRef.msgData = payload;
				SET errOutRef.statusCode = statusCode;
				SET errOutRef.ErrorDescription = 'Unknown Excception';
				SET OutputRoot.JSON.Data = errOutRef;

			END IF;

			PROPAGATE TO TERMINAL 'out1';
			SET OutputRoot = null;
			SET OutputRoot.JSON.Data.StatusCode = errOutRef.statusCode;
			SET OutputRoot.JSON.Data.ErrorDescription = errOutRef.ErrorDescription;
			
		END IF;

	END;
END MODULE;